
import * 'net'

export class WebRepl {

  method __init__(
    port as this.port = 2714, addr as this.addr = '127.0.0.1',
    ws'port as this.ws'port = 2721, port'max as this.port'max = 2728,
    useSandbox as this.useSandbox = null( debug ),
  ) {
    this.ws = WsServer(
      this.service,
      addr= this.addr, port= this.ws'port, port'max= this.port'max,
      useSandbox= this.useSandbox,
    )
    case this.ws.addrs() of {
      { wsAddr :> _extraWsAddrs } -> {
        console.info<| 'Đ (Edh) web REPL listening: ws://'
        ++ wsAddr.host() ++ ':' ++ wsAddr.port()
      }
      error( 'Đ (Edh) web REPL failed serving WebSocket.' )
    }

    this.http = HttpServer(
      # multiple modules providing static web resources, can stack up
      ( 'net/web/repl', 'net/web', 'web', ),
      this.addr, this.port, this.port'max, # network address to listen
      routes= { # routes by URI
        # tell web browser our port of WebSocket at uri `/@`
        "@": (blob$str$ wsAddr.port(), mime= 'text/plain', ),
      },
    )
    case this.http.addrs() of {
      { httpAddr :> _extraHttpAddrs } -> pass
      error( 'Đ (Edh) web REPL failed serving HTTP.' )
    }

    this.httpUrlBase = 'http://' ++ httpAddr.host() ++ ':' ++ httpAddr.port()
    this.sessions = {}

    console.info<| 'Đ (Edh) web REPL listening: ' ++ this.httpUrlBase
  }

  method __repr__() '<web ' ++ this.httpUrlBase ++ ' REPL>'


  interpreter replHere( callerScope, prompt= None ) {
    this.replWith( callerScope, prompt and callerScope.eval( prompt ) )
  }

  method replWith( scopeOrObj, prompt= None ) {
    case scopeOrObj of {
      { scope() = inScope } -> pass
      ;| type(scopeOrObj) is "Object" -> inScope = scope(ofObj= scopeOrObj)
      _ -> error( 'Unexpected scope or object: ' ++ desc(scopeOrObj) )
    }
    if this.useSandbox then {
      inScope = sandbox( inScope )
    }

    # create the session
    session = ReplSession(
      baseUrl= this.httpUrlBase,
      inScope= inScope,
      prompt= prompt,
    )

    console.info<| 'A new REPL session is waiting for interaction:\n *** '
    ++ session.location ++ '\n  *  ' ++ session.url

    # register the session
    this.sessions[ session.sid ] = session
    # finally un-register the session after it's done
    this.sessions[ session.sid ] = nil <=@ {
      effect listSessions = this.sprintSessions
      # run the session, until it's let go by some REPL client
      session.runSession()
    }

    # ctrl is passed back to caller after reaching here
  }


  method sprintSessions() case len( this.sessions ) of {
    0 -> 'no web REPL session atm - ' ++ this.httpUrlBase
    { scnt } -> {
      scnt ++ ' web REPL session(s) atm:\n' ++
      '\n'.join(
        *() =< for ( sid, session ) from this.sessions
        do ' *** ' ++ session.location ++ '\n  *  ' ++ session.url
      )
    }
  }

  method logSessions( logLevel= console.info ) {
    logLevel<| this.sprintSessions()
  }


  {##
   # per-client service method to run as a dedicated Edh program
   #
   # note once this procedure returns, the ws connection is disconnected, all forkee threads spawn from this thread, together with this thread, will be terminated as well.
   #}
  method service() {

    peer = perform @netPeer

    console.debug<| 'REPL web client connected - ' ++ peer
    defer {
      console.debug<| 'REPL web client disconnecting ' ++ peer
    }

    case perform rqParams.s of {
      { sessionId } -> pass
      # return from the module procedure will disconnect the ws connection
      # a string posted back will be shown directly on the web repl page
      return void peer.postCommand(
        'You need to include the session id in the url.'
      )
    }

    {
      case this.sessions[ sessionId ] of {
        { ReplSession() = session } -> {
          session.runREPL( peer )
        }
        _ -> peer.postCommand( `No such session - ` ++ sessionId )
      }
    } $=> { # Note that a former handler in a chain of multiple ($=>) handlers, still can't prevent `ThreadTerminate` from escalating to later handlers, as it's not catchable. So a handler block is used here to filter out `ThreadTerminate` from logging.
      { ThreadTerminate() } -> pass # usually network reset. Though `ThreadTerminate` is not catchable, we branch out to avoid logging for it here.

      { exc } -> {
        console.error<| 'Exception by REPL web client ' ++ peer ++ ' error: '
        ++ desc( exc )
      }
    }

  }

}


data ReplSession (
  baseUrl, inScope,
  prompt= None,
  sid= str$ UUID(),
  cmdIn= sink,
) {

  property$
  method url () this.baseUrl + '?s=' + this.sid

  property$
  method location() this.inScope.lexiLoc


  method runSession()
  # use a scoped for loop here, so the loop vars are in isolated scopes across iterations
  for@ ( cmdSrc, cmdOut ) from this.cmdIn do { exc } -> {
    # wild exception catching is never a good idea, here the speciality of REPL may justify it
    if not cmdOut.eos then cmdOut <- exc
  } <=$ case this.inScope.eval( parseEdh( cmdSrc ) ) of {
    { continue } -> {
      return void this.cmdIn <- cmdOut <- nil
    }

    { Command(cmd, apk= cmdArgs) } -> case cmd of {
      # todo
      #  *) enrich custom behaviors according to `cmdArgs`
      #  *) support more commands

      'quit' -> {
        return void this.cmdIn <- cmdOut <- nil
      }

      'dir' -> cmdOut <- case cmdArgs of {
        # bare dir command
        {( )} -> sprintDir( ofThe= this.inScope )

        # single arg as the target object/scope
        {( tgt )} -> sprintDir( ofThe= tgt )

        _ -> 'Unexpected args to dir command: ' ++ cmdArgs
      }

      _ -> cmdOut <- 'Unsupported command: ' ++ cmd
    }

    { cmdVal } -> cmdOut <- str( cmdVal )

    # note a nil result is ignored here
  }


  method runREPL( peer ) {

    peer.postCommand( this.prompt or ( '''  ***
You are in a REPL at ''' ++ this.inScope.lexiLoc ++ '''
  ***
send in `quit` or `continue` to leave the REPL session,
so the caller can continue.
''' ) )

    # make sure this repl terminates when the session is finished, it can be finished by another web client without this one even submitted anything
    perceive this.cmdIn nil -> break

    # show results
    perceive cmdOut = sink { cmdResult } -> {
      ;| type(cmdResult) is "String" -> peer.postCommand( cmdResult )
      ;| peer.eol() is false -> {
        peer.postCommand( 'Recovered from error: ' ++ desc( cmdResult ) )
      }
    }

    # pump input commands to be executed
    while peer.eol() is false case peer.readSource() of {
      { cmdSrc } | not null( cmdSrc ) -> this.cmdIn <- ( cmdSrc, cmdOut )
    }

  }

}
