
{#
 # networked client to remote console
 #}

import * 'net'

# here we use case-of + wild capture pattern to avoid the
# transaction imposed by assignment, that's to say:
#   client = Client ()
# won't work as the assignment transaction will prevent the
# necessary IO action to be performed during construction of
# the client instance.

export method consoleTo(
  addr= '127.0.0.1', # remote addr to connect
  port= 3720, # remote port to connect
  consumer= 'net/ncc', # the peer module
  init= None, # peer module initialization
) {

  clnt = Client( consumer, addr, port=port, init=init, )

  case clnt.addrs() of {
    { addr :>_ } -> console.info<| 'Connected to console server at: ' ++ addr
    # or the network has failed, propagate the error
    clnt.join() # this usually throws
    # in case join() didn't throw, report this error
    error( 'Networked console client failed connecting.' )
  }

  clnt.join() $=> { exc } -> {
    console.error<| 'Some trouble with the console server:\n' ++ exc
  }

  console.info<| 'Disconnected from console server.'
}
