
{#
 # networked console server
 #}

import * 'net'

export method consoleOn (
  conModu,                 # the console service module
  servAddr  ='127.0.0.1',  # local addr to bind
  servPort  =3720,         # local port to bind
  init      =None,         # peer module initialization
) {
  case Server (
    conModu, servAddr, servPort, init=init,
  ) of { ncon } -> { pass }

  case ncon.addrs() of {
    { addr =>_ } -> console.info<| 'Serving networked console at: ' ++ addr
    # or the network has failed, propagate the error
    ncon.join()  # this usually throws
    # in case join() didn't throw, report this error
    error('Networked console server failed listening.')
  }

  # wait end-of-life for each client, log err if any
  go for peer from ncon.clients do { go {
    method _ (peer') {
      peer'.join() $=> { nccExc } -> {
        console.warn<| 'Console client caused trouble - '
          ++ peer' ++ '\n' ++ nccExc
      }
    }
  } (peer) }
  # note an anoymous method is used above, to retain an attr named
  # `peer'`, locally in the procedure's scope, as the loop will
  # repeatedly change attr named `peer` in the outer scope

  return ncon
}
