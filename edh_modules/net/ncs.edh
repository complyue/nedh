{##
 # networked console server
 #}

import * 'net'


# wait end-of-life for one client, log err if any
method trackConsoleClient( peer ) {
  peer.join() $=> { nccExc } -> {
    console.warn<| 'Console client caused trouble - ' ++ peer ++ '\n' ++ nccExc
  }
}

export method consoleOn (
  services, # an object exposing service methods available to console clients
  servAddr= '127.0.0.1', # local addr to bind
  servPort= 3720, # local port to bind
  **kwargs,
) {
  let ncon = Server ( addr= servAddr, port= servPort, **kwargs, ) $@ () => {

    # obtain effectful arts per TCP service context
    peer = perform @netPeer
    peer =: Peer()

    console.info<| 'Console client connected - ' ++ peer
    defer {
      console.info<| 'Disconnecting console client ' ++ peer
    }

    effect { # define conventional artifacts in effect
      # note in assignments to symbolic attributes, semicolon before `@` is likely necessary, to disambiguate the `@` from an infix operator, in case there are any expressions before it

      # local receiving end of the standard data channel
      ; @dataSink = peer.armChannel( dataChan ?:= 'data' )

    }

    # some handling of the service scope, in which context that incoming commands from console clients will be landed
    case peer.sandbox of {
      { svcScope } -> {
        # the service is sandboxed. in this case, the sandbox scope, which is the lexical context used to land incoming commands from console clients, is rather minimal
        # we at least make Nedh symbols available there, for console clients to use them
        from 'net/symbols' import * into svcScope

        # expose specified service methods
        from services import * into svcScope
      }
      # the service is not sandboxed, current scope will be used to land incoming commands from console clients, all Nedh artifacts, beside many other artifacts are already available here
      svcScope = scope()

      # expose specified service methods
      import * services
    }

    {

      # change console client's command prompt
      peer.p2c(
        0, # direct to `conin := 0` to change command prompt
        # use a tuple to change both ps1 and ps2
        # repr( ("(demo-con)Đ: ", "Đ| ") ),
        # or change ps1 only
        repr( "(demo-con)Đ: " ),
      )

      while peer.eol() is false { # this is the *Loop* in so-called REPL
        # Read+Eval (peer.readCommand) -> Print (peer.print) -> Loop

        case peer.readCommand() of {@
          nil -> { # conout an empty string or the console client will
            # wait for its eval result forever
            peer.p2c(
              1, # direct to channel conout := 1
              "''",
            )
          }
          batteries.quit -> break
          batteries.dir -> peer.p2c(
            1, # direct to channel conout := 1
            repr( sprintDir( svcScope ) ),
          )
          { cmdVal } -> {
            peer.p2c(
              1, # direct to channel conout := 1
              expr case {$ cmdVal $} of {
                nil -> ''
                { v } -> v
              },
            )
          }
        @}

      } $=> { # catch exceptions
        if peer.eol() is not false then {
          break # already disconnected
        }
        { cmdExc } -> {
          # a business service may choose to pass error through `errChan` in
          # this case, but the console here merely notify the client about it
          peer.p2c(
            1, # direct to channel conout := 1
            repr( 'Recovered from error: ' ++ desc( cmdExc ) ),
          )
        }
      }

    } $=> { exc } -> {
      console.error<| 'Exception by console client ' ++ peer
      ++ ' error: ' ++ desc( exc )
    }

  }

  ncon =: Server() # prototype it

  case ncon.addrs() of {
    { addr :>_ } -> console.info<| 'Serving networked console at: ' ++ addr
    # or the network has failed, propagate the error
    ncon.join() # this usually throws
    # in case join() didn't throw, report this error
    error( 'Networked console server failed listening.' )
  }

  go for@ clientPeer from ncon.clients do go trackConsoleClient( clientPeer )

  return ncon
}
