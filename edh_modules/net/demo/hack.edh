
{#
 # this is the helper module for service hacking via some CLI
 # (command line interface)
 #}

import * 'net'

# an example procedure can be called via rpc by peer
export method ack( msg ) {
  console.info<| 'You are informed by the service that:\n  ' ++ msg
}

# here we use case-of + wild capture pattern to avoid the
# transaction imposed by assignment, that's to say:
#   client = Client ()
# won't work as the assignment transaction will prevent the
# necessary IO action to be performed during construction of
# the client instance.

export method cmdLineTo(
  addr= '127.0.0.1', # remote addr to connect
  port= 3721, # remote port to connect
  consumer= 'net/demo/hack', # the peer module
  init= None, # peer module initialization
) {

  case Client( consumer, addr, port=port, init=init, )
  of { client } -> { pass }

  case client.addrs() of { addrs } ->
  console.info<| 'Connected to service at: ' ++ addrs

  client.join() $=> { exc } -> {
    console.info<| 'The service caused some trouble: ' ++ exc
  }

  console.info<| 'Disconnected from the service.'

}
