
{#
 # this is the client-facing entry module for a networked console.
 # 
 # this module is instantiated and run per client connection, the
 # client is disconnected once this module finished running.
 #}

import * 'net/symbols'
import (Peer, **_) 'net/RT'


# a Peer object should have been implanted atomically, the following
# line should have no practical effect but to hint an IDE for code
# completion etc.
peer ?:= Peer()

console.info<| 'Console client connected - ' ++ peer


# define various effectful artifacts used for communication with
# this connected consumer client session
effect {  # enclosed definitions go into effect namespace

  ;@netPeer = peer

  ;@dataSink = peer.armChannel(dataChan)

  method @sendCmd (c, *cs) {
    peer.postCommand(repr(c))
    for c from cs do
      peer.postCommand(repr(c))
  }

  method @sendData (d, *ds) {
    peer.p2c(dataChan, repr(d))
    for d from ds do
      peer.p2c(dataChan, repr(d))
  }

}  # end effect namespace


{

  # change console client's command prompt
  peer.p2c(
    0, # direct to `conin := 0` to change command prompt
    # use a tuple to change both ps1 and ps2
    # repr( ("(demo-con)Đ: ", "Đ| ") ),
    # or change ps1 only
    repr( "(demo-con)Đ: " ),
  )

  while false == peer.eol() {  # this is the *Loop* in so-called REPL
    # Read+Eval (peer.readCommand) -> Print (peer.print) -> Loop

    case peer.readCommand() of {
      nil -> {  # conout an empty string or the console client will
        # wait for its eval result forever
        peer.postCommand(
          "''",
          1, # direct to channel conout := 1
        )
      }
      batteries.quit -> { break }
      batteries.dir -> peer.postCommand(
        repr( sprintDir() ),
        1, # direct to channel conout := 1
      )
      { cmdVal } -> {
        peer.postCommand(
          repr( cmdVal ),
          1, # direct to channel conout := 1
        )
        cmdVal = nil  # clear it
      }
    }

  } $=> {  # catch exceptions
    if false != peer.eol() then {
      break  # already disconnected
    }
    { cmdExc } -> {
      peer.postCommand(
        repr( 'Recovered from error\n  exception=' ++ cmdExc ),
        1, # direct to channel conout := 1
      )
    }
  }

} $=> { exc } -> {
  console.warn<| 'Console client ' ++ peer ++ ' error: ' ++ exc
}

console.info<| 'Console client disconnected - ' ++ peer
