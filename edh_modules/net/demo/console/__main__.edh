
{#
 # this is the client-facing module for a networked console
 # 
 # this module is instantiated and run per client connection.
 #
 # a `{ net.Peer: peer }` object is guaranteed to have been
 # implanted by per-connection host module preparation.
 #
 # none or more of other artifacts may have been implanted as well,
 # according to the per-connection peer module initialization method
 # (e.g. __peer_init__) specified on construction of the very
      net.Server( 'net/demo/console', ..., init=__peer_init__, )
 # instance.
 #}

import * 'net/options'

console.info<| 'Console client connected - ' ++ peer

{

  # change console client's command prompt
  peer.p2c(
    0, # direct to `conin := 0` to change command prompt
    # use a tuple to change both ps1 and ps2
    # repr( ("(rcon)Đ: ", "Đ| ") ),
    # or just ps1
    repr( "(rcon)Đ: " ),
  )

  while false == peer.eol() {  # this is the *Loop* in so-called REPL
    # Read+Eval (peer.readCommand) -> Print (peer.print) -> Loop

    case peer.readCommand() of {
      nil -> {  # conout an empty string or the console client will
        # wait for its eval result forever
        peer.postCommand(
          "''",
          1, # direct to channel conout := 1
        )
      }
      batteries.quit -> { break }
      batteries.dir -> peer.postCommand(
        repr( sprintDir() ),
        1, # direct to channel conout := 1
      )
      { cmdVal } -> {
        peer.postCommand(
          repr( cmdVal ),
          1, # direct to channel conout := 1
        )
        cmdVal = nil  # clear it
      }
    }

  } $=> {  # catch exceptions
    if false != peer.eol() then {
      break  # already disconnected
    }
    { cmdExc } -> {
      peer.postCommand(
        repr( 'Recovered from error\n  exception=' ++ cmdExc),
        1, # direct to channel conout := 1
      )
    }
  }

} $=> { exc } -> {
  console.warn<| 'Console client ' ++ peer ++ ' error: ' ++ exc
}

console.info<| 'Console client disconnected - ' ++ peer
