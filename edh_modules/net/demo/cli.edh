
{#
 # this is the CLI (command line interface) helper module
 #}

import * 'net'

method ack(msg) {
  console.info<| 'Message from the service:\n  ' ++ msg
}

# a consumer initialization method can be used to inject
# artifacts into a server facing consumer module after it is
# instantiated but before running. such a consumer module can
# obtain globally shared resources by vanilla importing, but
# for private resources prepared without global visibility,
# injection is the only way to pass them on to there.

method __cnsmr_init__() {
  # implant the `ack()` procedure to the consumer module
  that.ack = ack
}

# here we use case-of + wild capture pattern to avoid the
# transaction imposed by assignment, that's to say:
#   client = Client ()
# won't work as the assignment transaction will prevent the
# necessary IO action to be performed during construction of
# the client instance.

method cmdLineTo(
  addr ='127.0.0.1',         # remote addr to connect
  port =3721,                # remote port to connect
  consumer ='net/demo/cli',  # the consumer module
  init =__cnsmr_init__, # per-client consumer module initialization
) {

  case Client( consumer, addr, port, init=init, ) of { client } -> {
    # assign it to the calling module
    that.client = client
  }

  case client.addrs() of { addrs } ->
    console.info<| 'Connected to service at: ' ++ addrs

  client.join() $=> { exc } -> {
    console.info<| 'The service caused some trouble: ' ++ exc
  }

  console.info<| 'Disconnected from the service.'

}
