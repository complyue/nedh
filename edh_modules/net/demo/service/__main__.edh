
{#
 # this is the client-facing entry module of the demo service
 #
 # this module is instantiated and run per client connection, the
 # client is disconnected once this module finished running.
 #}

import ( Peer, ** ) 'net/RT'
import * 'net/symbols'
effect import * 'net/effects'


# expose service procedures exported from the persistent module
import * '.'


# a Peer object should have been implanted automatically, the following
# line should have no technical effect but to hint an IDE for code
# completion etc.
peer =: Peer()

console.info<| 'Serving demo client - ' ++ peer
defer {
  console.info<| 'Disconnecting demo client ' ++ peer
}


# define various effectful artifacts used for communication with this
# connected consumer client session, with `@netPeer` and `@dataSink` the
# minimum by convention
#
# note in assignments to symbolic attributes, semicolon before `@` is likely
# needed or the `@` may be parsed as an infix operator
effect {
  ; @netPeer = peer
  ; @dataSink = peer.armChannel( dataChan ?:= 'data' )
}


# alias this entry module so remote client can rpc test what's available
# in this environment via this attr
service := this


{

  peer.p2c(
    2, # direct to channel `conmsg := 2`
    # we use the interpolated expr form to compose the remote command,
    # and here we use operator (+) instead of the more idiomatic (++)
    # (in Edh) for string concatenation, in case the client is not
    # speaking Edh, or at least it does not support (++) as string
    # concat op, e.g. a Python client
    expr "Good day, " + {$ repr( peer ) $},
  )

  while peer.eol() is false case peer.readCommand() of {@
    # note this is a scoped block, so attributes assigned within this block
    # will be discarded on leaving this block scope, not affecting the outer,
    # module scope at all.

    { cmdVal } -> {
      # serving as a simple expression evaluator, post the result
      # back as client's console output, i.e. `conout := 1`
      console.debug<| 'Got cmd from ' ++ peer ++ '\n  ' ++ cmdVal
      peer.p2c(
        1, # direct to channel conout := 1
        repr( cmdVal ),
      )
    }

    # note a command resulting in nil is ignored here
  @}

} $=> { exc } -> {
  console.error<| 'Exception by demo client ' ++ peer
  ++ ' error: ' ++ desc( exc )
}
