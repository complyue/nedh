
{##
 # this is a client-facing entry module for a WebSocket endpoint.
 #
 # this module is instantiated and run per WebSocket connection, the
 # client is disconnected once this module finished running.
 #}

import * 'net'


if false then { # hint the assumed environment

  # a Peer object representing the ws connection should have been implanted
  peer ?= Peer()

  # reqPath & reqParams should have been implanted as well, reflecting ws request path and query parameters
  reqPath ?= '/'
  reqParams ?= ( s= '<session-id>', )

  # such a method bound to a WebRepl instance should have been implanted
  method hookToSession( peer_, sessionId_ ) pass
}

console.debug<| 'REPL web client connected - ' ++ peer
# console.debug<| ( reqPath= reqPath, reqParams= reqParams, )
defer {
  console.debug<| 'REPL web client disconnecting ' ++ peer
}


case reqParams.s of {
  { sessionId } -> { pass }
  # return from the module procedure will disconnect the ws connection
  # a string posted back will be shown directly on the web repl page
  return void peer.postCommand(
    'You need to include the session id in the url.'
  )
}


hookToSession( peer, sessionId )
$=> { ThreadTerminate() } -> { pass } # usually network reset
$=> { exc } -> {
  console.error<| 'Exception by REPL web client ' ++ peer ++ ' error: '
  ++ desc( exc )
}
