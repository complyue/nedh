
{##
 # this is a client-facing entry module for a WebSocket endpoint.
 #
 # this module is instantiated and run per WebSocket connection, the
 # client is disconnected once this module finished running.
 #}

import * 'net'


if false then { # hint the assumed environment

  # a Peer object representing the ws connection should have been implanted
  peer ?= Peer()

  # reqPath should have been implanted as well, reflecting ws request path
  reqPath ?= '/'

  # such a method bound to a WebRepl instance should have been implanted
  method hookToSession( peer, sessionId ) pass
}

console.debug<| 'REPL web client connected - ' ++ peer
defer {
  console.debug<| 'REPL web client disconnecting ' ++ peer
}

case reqPath of {
  { _ @< '?' >@ sessionId } -> { pass }
  return void peer.postCommand(
    'You need to include the session id in the url.'
  )
}

{
  hookToSession( peer, sessionId )
} $=> {
  { { ThreadTerminate:_ } } -> { pass } # usually network reset
  { exc } -> {
    console.error<| 'Exception by REPL web client ' ++ peer
    ++ ' error: ' ++ desc( exc )
  }
}
