
import * 'net'


namespace service (
  pi = 3.14, cntr = 0,
  # note args above are assigned to the namespace but not exported
) export { # export all definitions within this block

  # re-export service methods from some reusable lib, they'll get exposed to service clients as well
  import * './service'

  # some locally defined service
  method calc( m, n ) {

    # atomically increase our counter, with wrap back at 100
    #
    # note: `cntr` is accessed via this reference,
    #       contextual this/that here are both the namespace object
    # if we ever assigned an attribute into the local scope also named
    # `cntr`, it'll shadow the namespace's `cntr`, i.e. we'll only be able
    # to access `cntr` in the namespace via this or that reference
    ai this.cntr = case this.cntr+1 of {@
      100 -> 0 # do the wrap back
      # {@ ... @} is a scoped block, it can be used to limit the shadowing
      # i.e. assignments inside a scoped block have no effect on outside of
      # it, so even we assign (via the pattern match) to `cntr` here, the
      # formula below can still reference `cntr` in the namespace lexically
      { cntr } -> cntr
    @}

    # note: `pi` and `cntr` are accessed lexically at outer scope (of the
    #       namespace), i.e. enclosed by this method procedure
    n + m * cntr / pi
  }

}


# use a producer procedure here, so as to consume each connected client without the race condition to miss any one of them
producer serveClients( outlet, **kwargs, ) {
  defer outlet <- nil # mark eos for the clients sink, anyway on eol of the server

  let server = Server( clients= outlet, **kwargs, ) $@ () => {

    # obtain effectful arts per TCP service context
    peer = perform @netPeer
    peer =: Peer()

    console.info<| 'Serving demo client - ' ++ peer
    defer {
      console.info<| 'Disconnecting demo client ' ++ peer
    }


    # some handling of the service scope, in which context that incoming commands from service clients will be landed
    case peer.sandbox of {
      { svcScope } -> {
        # the service is sandboxed. in this case, the sandbox scope, which is the lexical context used to land incoming commands from service clients, is rather minimal
        # we at least make Nedh symbols available there, for service clients to use them
        from 'net/symbols' import * into svcScope

        # make service methods directly available there
        from service import * into svcScope
        # make available the service method collecton (kw-only-apk) too, so a service client can check what service methods are available through it, via rpc
        svcScope.put(service= service)
      }
      # the service is not sandboxed, current scope will be used to land incoming commands from service clients
      # the `service` method collection (kw-only-apk) is already availabel here, a service client can check what service methods are available through it, via rpc
      svcScope = scope()
      # make all service methods directly available from here
      import * service
    }


    {

      peer.p2c(
        2, # direct to channel `conmsg := 2`
        # we use the interpolated expr form to compose the remote command,
        # and here we use operator (+) instead of the more idiomatic (++)
        # (in Edh) for string concatenation, in case the client is not
        # speaking Edh, or at least it does not support (++) as string
        # concat op, e.g. a Python client
        expr "Good day, " + {$ repr( peer ) $},
      )

      while peer.eol() is false case peer.readCommand() of {@
        # note this is a scoped block, so attributes assigned within this block will be discarded on leaving this block scope, not affecting the outer, module scope at all.

        { cmdVal } -> {
          # serving as a simple expression evaluator, post the result
          # back as client's console output, i.e. `conout := 1`
          console.debug<| 'Got cmd from ' ++ peer ++ '\n  ' ++ cmdVal
          peer.p2c(
            1, # direct to channel conout := 1
            repr( cmdVal ),
          )
        }

        # note a command resulting in nil is ignored here
      @}

    } $=> { exc } -> {
      console.error<| 'Exception by demo client ' ++ peer
      ++ ' error: ' ++ desc( exc )
    }

  }

  server =: Server() # prototype it for IntelliSense

  # this waits the server to start listening and returns actual addresses
  case server.addrs() of {
    { addr :> extraAddrs }
    -> console.info<| 'Demo service listening: ' ++ addr
    server.join() # this usually throws
    # in case join() didn't throw, report this error
    error( 'Demo service failed listening.' )
  }

  server.join() # wait until eol of the server
}


method trackClientLife( peer ) {
  # wait eol of the client, catch and report any exception
  peer.join() $=> { exc } -> {
    console.warn<| 'Demo client ' ++ peer ++ ' caused some trouble: ' ++ exc
  }
  console.info<| 'Demo client disconnected - ' ++ peer
}

for clientPeer from serveClients( addr= '127.0.0.1', port= 3721, ) do {
  console.info<| 'Tracking demo client - ' ++ clientPeer

  clientPeer.postCommand(
    repr( 'Note that you are tracked, ' ++ clientPeer ),
    # direct this command to the cli peer's conmsg channel
    conmsg
  )

  go trackClientLife( clientPeer )
}

console.print( 'Demo server done.' )
