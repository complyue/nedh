
import * 'net/demo/cli'

# it is expected that the nedh demo service to be there, e.g.
#   cabal v2-run nedh < Tour/service-simple.edh
cmdLineTo( '127.0.0.1', 3721, )

# `cmdLineTo()` waits until disconnected from service, following
# lines will be read by the cli loop as console commands, then
# each posted to the service as peer command, if not nil.

expr 3*7

{
  # enclose multiple statements within this block, so they're not
  # interpreted as multiple console commands, but value of the last
  # statement will do.

  console.info<| 'Doing rpc directly - calling the police ...'
  
  # example of some local data to be baked into rpc
  policeTelNo := 110

  peer.postCommand(expr  # expr literal is the sane way,
    # to compose rpc commands.

    # interpolation within the expr literal is the idiomatic way,
    # to bake local information into the rpc programmatically, e.g.
    #
    #   `{$ someLocalProcedure( ***someLocalArgs ) $}`
    #
    callThePolice( telno = {$ policeTelNo $} )

  )

  # `peer.postCommand()` returns nil, so this whole block is nop to cli
}

expr expr ack( 'Some levels of inception actually works!' )

waSec # wait a second to see async messages back from service

# stop the cli loop, i.e. to actively disconnect from service
quit

# here back to the top level Edh repl, quit gracefully
quit
