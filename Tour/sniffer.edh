
import * 'net'


# %%
let sniffer = Sniffer( addr= '0.0.0.0', port= 3721,) $@ () => {
  console.info<| 'Sniffing ...'

  # define artifacts in hosting the execution of incoming commands
  from namespace service'methods() {

    export method foo( x ) {
      return 'foo @ ' ++ x
    }

    export method bar( y ) {
      return foo( y * 3 )
    }

  } import * into perform svcScope

  # loop forever until eol on error, or stopped elsewhere
  while perform eol() is false {

    # note nil result from `sniff()` is silently ignored
    case perform sniff() of { cmdVal } -> {
      console.info<| 'Sniffed cmd:\n  ' ++ cmdVal
    }

  } $=> { exc } -> {
    console.error<| 'Error sniffing: ' ++ desc( exc )
  }
}


# %# following line keeps the sniffer running when this file is executed by "runnedh"
sniffer.join()
