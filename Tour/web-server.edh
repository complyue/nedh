
# use a namespece to contain artifacts prepared from the following scoped block
namespace webServer () pass

# %{ use a scoped block so nedh artifacts are not imported into top-level
{@

  # %%
  import * 'net'

  # %%
  webServer.ws = WsServer(
    'net/demo/web/ws', # facade module
    '127.0.0.1', 3790, # network address to listen
    port'max=3799, # try listen up to this port
  )
  case webServer.ws.addrs() of {
    { wsAddr :> _extraWsAddrs } -> {
      console.info<| 'Nedh WebSocket service listening: ws://'
      ++ wsAddr.host() ++ ':' ++ wsAddr.port()
    }
    error( 'Nedh WebSocket service failed start serving.' )
  }


  # %%
  webServer.http = HttpServer(
    # multiple modules providing static web resources can stack up
    ( 'net/demo/web', ),
    '127.0.0.1', 3780, # network address to listen
    port'max=3789, # try listen up to this port
    routes= ( # routes by URI
      # tell web browser our port of WebSocket at uri `/:`
      ( ":", '' ++ wsAddr.port(), mime= 'text/plain' ),
    ),
  )
  case webServer.http.addrs() of {
    { httpAddr :> _extraHttpAddrs } -> {
      console.info<| 'Nedh http service listening: http://'
      ++ httpAddr.host() ++ ':' ++ httpAddr.port()
    }
    error( 'Nedh http service failed start serving.' )
  }

  # %}
@}

# %%
# this line helps to keep the server live when run not interactively
webServer.http.join()
