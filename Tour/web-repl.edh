{##
 # a web based REPL server can be embedded into any running Edh process
 #
 # it can ease debugging & trouble-shooting
 #}

import * 'net/repl'


# %%
# create the ws+http REPL server
#
# ideally you start a singleton and have it shared globally, but multiple
# instances can run simultaneously and work well together
wl = WebRepl(
  # lexical outer scopes are not available to a sandboxed repl, e.g. the `wl`
  # attribute above, besides other constraints e.g. the ability to import from
  # host and/or file modules is neither available.
  #
  # it's enabled by default, but you can disable the sandbox mechanism -
  #
  # some security risks are mitigated at the cost of some debuggabilities
  # sacrificed, and vice versa.
  useSandbox= null$debug,
  # debug will be `false` in normal case, but will be set to the debug module,
  # when the env var is set EDH_LOG_LEVEL=DEBUG
)


# %%
# simulate some concurrent thread in need of debugging power
method deepSystemWork( sysNo ) {
  effect sysNo = sysNo
  for cmpNo from range( 3 )
  do deepComponentWork( cmpNo )
}

method deepComponentWork( cmpNo ) {

  # potential issue detection should be rather sophisticated,
  # we just assume it right done here for demo purpose
  issue'detected = perform sysNo is 1
  # in the demo, you are supposed to send a `issue'solved = true` input command
  # to mark the issue resolved
  issue'solved = not issue'detected

  if issue'detected then {

    prompt = if cmpNo // 2 * 2 is cmpNo
    then None # demo default prompt for even component number
    else ( # demo custom prompt for odd component number
      'Please, subsystem ' ++ perform sysNo ++ ', component ' ++ cmpNo
      ++ ' may have some problems to be tracked down ...' )

    # replHere() will block until quit/continue issued from a web client
    wl.replHere( prompt )
  }

  if not issue'solved
  then console.warn<| 'Subsystem ' ++ perform sysNo ++ ', component '
  ++ cmpNo ++ ' seems not working.'
  else console.info<| 'Subsystem ' ++ perform sysNo ++ ', component '
  ++ cmpNo ++ ' seems working as expected.'

}

# %%
# start 3 simultaneous subsystems
for sysNo from range( 3 ) do go deepSystemWork( sysNo )
# slightly some delay
for _ from console.everyMillis( 20 ) do break


# %%
# show session count and url list every 30 seconds
for _ from console.everySeconds( 30, wait1st= false )
do wl.logSessions()
